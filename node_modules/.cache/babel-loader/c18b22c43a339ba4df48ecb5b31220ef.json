{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ekene_Surface\\\\OneDrive\\\\Desktop\\\\findjob\\\\job-listing-react\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Grid, ThemeProvider, Typography, CircularProgress, Button } from \"@material-ui/core\";\nimport theme from \"./theme/theme\";\nimport Header from \"./components/Header\";\nimport SearchBar from \"./components/SearchBar\";\nimport JobCard from \"./components/Job/JobCard\";\nimport { firestore, app } from \"./firebase/config\";\nimport NewJobModal from \"./components/Job/NewJobModal\";\nimport { Close as CloseIcon } from '@material-ui/icons'; // import jobData from './dummyData'; // initialally used dummy data\n\nexport default (() => {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [customSearch, setCustomSearch] = useState(false); // create state modal\n\n  const [newJobModal, setNewJobModal] = useState(false);\n\n  const fetchJobs = async () => {\n    setLoading(true); // set loading to true\n\n    const req = await firestore // firestore is a collection of all the jobs\n    .collection(\"jobs\").orderBy(\"postedOn\", \"desc\").get();\n    const tempJobs = req.docs.map(job => ({ ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate()\n    }));\n    setJobs(tempJobs); // set the jobs to the tempJobs\n\n    setLoading(false);\n  };\n\n  const fetchJobsCustom = async jobSearch => {\n    setLoading(true); // set loading to true\n\n    setCustomSearch(true);\n    const req = await firestore // firestore is a collection of all the jobs\n    .collection(\"jobs\").orderBy(\"postedOn\", \"desc\").where(\"location\", \"==\", jobSearch.location).where(\"type\", \"==\", jobSearch.type).get();\n    const tempJobs = req.docs.map(job => ({ ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate()\n    }));\n    setJobs(tempJobs); // set the jobs to the tempJobs\n\n    setLoading(false);\n  }; // post jobs to firestore database\n\n\n  const postJob = async jobDetails => {\n    await firestore.collection(\"jobs\").add({ ...jobDetails,\n      postedOn: app.firestore.FieldValue.serverTimestamp()\n    });\n    fetchJobs(); // fetch jobs again after posting\n  };\n\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    openNewJobModal: () => setNewJobModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(NewJobModal, {\n    closeModal: () => setNewJobModal(false),\n    newJobModal: newJobModal,\n    postJob: postJob,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    fetchJobsCustom: fetchJobsCustom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    mt: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, customSearch && /*#__PURE__*/React.createElement(Box, {\n    my: 2,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }), \"Custom Search\")), jobs.map(job => /*#__PURE__*/React.createElement(JobCard, Object.assign({\n    key: job.id\n  }, job, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }))))))));\n});","map":{"version":3,"sources":["C:/Users/Ekene_Surface/OneDrive/Desktop/findjob/job-listing-react/src/App.js"],"names":["React","useState","useEffect","Box","Grid","ThemeProvider","Typography","CircularProgress","Button","theme","Header","SearchBar","JobCard","firestore","app","NewJobModal","Close","CloseIcon","jobs","setJobs","loading","setLoading","customSearch","setCustomSearch","newJobModal","setNewJobModal","fetchJobs","req","collection","orderBy","get","tempJobs","docs","map","job","data","id","postedOn","toDate","fetchJobsCustom","jobSearch","where","location","type","postJob","jobDetails","add","FieldValue","serverTimestamp"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Box, Grid, ThemeProvider, Typography, CircularProgress, Button } from \"@material-ui/core\";\r\nimport theme from \"./theme/theme\";\r\nimport Header from \"./components/Header\"\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport JobCard from \"./components/Job/JobCard\";\r\nimport { firestore, app } from \"./firebase/config\";\r\nimport NewJobModal from \"./components/Job/NewJobModal\";\r\nimport { Close as CloseIcon } from '@material-ui/icons'\r\n\r\n\r\n// import jobData from './dummyData'; // initialally used dummy data\r\n\r\nexport default () =>{\r\n    const [jobs, setJobs] = useState([]);\r\n    \r\n    const [loading, setLoading] = useState(true);\r\n    const [customSearch, setCustomSearch] = useState(false)\r\n    // create state modal\r\n    const [newJobModal, setNewJobModal] = useState(false);\r\n\r\n\r\n\r\n\r\n    const fetchJobs = async () =>{\r\n      setLoading(true); // set loading to true\r\n      const req = await firestore // firestore is a collection of all the jobs\r\n      .collection(\"jobs\")\r\n      .orderBy(\"postedOn\", \"desc\")\r\n      .get();\r\n      const tempJobs = req.docs.map((job) =>({ \r\n        ...job.data(), \r\n        id: job.id,\r\n         postedOn: job.data().postedOn.toDate(),\r\n         }));\r\n      \r\n      setJobs(tempJobs);  // set the jobs to the tempJobs\r\n      setLoading(false);\r\n    };\r\n  \r\n    const fetchJobsCustom = async jobSearch =>{\r\n\r\n      setLoading(true); // set loading to true\r\n      setCustomSearch(true);\r\n      const req = await firestore // firestore is a collection of all the jobs\r\n      .collection(\"jobs\")\r\n      .orderBy(\"postedOn\", \"desc\")\r\n      .where(\"location\", \"==\", jobSearch.location)\r\n      .where(\"type\", \"==\", jobSearch.type)\r\n      .get();\r\n      const tempJobs = req.docs.map((job) =>({\r\n         ...job.data(),\r\n          id: job.id,\r\n           postedOn: job.data().postedOn.toDate()\r\n           }));\r\n      \r\n      setJobs(tempJobs);  // set the jobs to the tempJobs\r\n      setLoading(false);\r\n    }\r\n  \r\n  \r\n\r\n\r\n    \r\n\r\n  // post jobs to firestore database\r\n    const postJob = async jobDetails =>{\r\n      await firestore.collection(\"jobs\").add({\r\n        ...jobDetails,\r\n        postedOn: app.firestore.FieldValue.serverTimestamp()\r\n      });\r\n      fetchJobs()// fetch jobs again after posting\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchJobs();\r\n    } , [])\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n        <Header openNewJobModal ={() => setNewJobModal(true)} />\r\n        <NewJobModal closeModal={() => setNewJobModal(false)} \r\n        newJobModal={newJobModal} postJob={postJob} \r\n        />\r\n        <Box mb={5}>\r\n        <Grid container justify=\"center\">\r\n          <Grid item xs={10}>\r\n            <SearchBar fetchJobsCustom={fetchJobsCustom} />\r\n\r\n            {loading ? ( \r\n              <Box display=\"flex\" justifyContent=\"center\" mt={2}>\r\n              <CircularProgress color=\"secondary\" />\r\n              </Box>\r\n              ):  (\r\n                <>\r\n                { customSearch  && \r\n                \r\n               ( <Box my={2} display=\"flex\" justifyContent=\"flex-end\">\r\n                  <Button>\r\n                  <CloseIcon size={20} />\r\n                  Custom Search\r\n                  </Button>\r\n                  </Box>\r\n               )}\r\n              {jobs.map((job) => \r\n                <JobCard key={job.id} {...job} />\r\n              )}\r\n                </>\r\n              )}\r\n            </Grid>\r\n        </Grid>\r\n        </Box>\r\n    </ThemeProvider>\r\n  ); \r\n };"]},"metadata":{},"sourceType":"module"}